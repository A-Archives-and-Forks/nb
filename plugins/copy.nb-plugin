#!/usr/bin/env bash
###############################################################################
# copy / duplicate
#
# A plugin for `nb` providing copy / duplicate functionality.
#
# Install with:
#   nb plugin install https://github.com/xwmx/nb/blob/master/plugins/copy.nb-plugin
#
# https://github.com/xwmx/nb
###############################################################################

# Add the new subcommand names with `_subcommands add <name>`.
_subcommands add "copy"
_subcommands add "duplicate"

# Define help and usage text with `_subcommands describe <subcommand> <usage>`.
_subcommands describe "copy" <<HEREDOC
Usage:
  nb copy ([<notebook>:][<folder-path>/][<id> | <filename> | <title>])

Description:
  Create a copy of the specified item in the current notebook.

Alias: \`nb duplicate\`
HEREDOC

# Define the subcommand as a function, named with a leading underscore.
_copy() {
  # The selector argument can be an <id>, <filename>, <path>, or <title>, with
  # or without a preceeding notebook name. Examples:
  #   1
  #   example.md
  #   title
  #   /path/to/example.md
  #   notebook:1
  #   notebook:example.md
  #   notebook:title
  #   notebook:/path/to/example.md
  local _source_selector="${1:-}"
  local _target_selector="${2:-}"

  # Check for the presence of a selector, exiting and printing help if not
  # found:
  if [[ -z "${_source_selector:-}" ]]
  then
    _help "copy"
    exit 1
  fi

  local _source_notebook_path=
  _source_notebook_path="$(
    _notebooks show "${_source_selector:-}" --path 2>/dev/null  ||
      _notebooks current --path
  )"

  local _source_relative_path=
  _source_relative_path="$(
    _show "${_source_selector}" --relative-path 2>/dev/null || :
  )"

  local _source_basename="${_source_relative_path##*/}"

  if [[   -z "${_source_relative_path:-}"                         ]] ||
     [[ ! -e "${_source_notebook_path}/${_source_relative_path}"  ]]
  then
    _warn printf "Not found: %s\\n" "$(
      _color_primary "${_source_selector:-}"
    )"

    return 1
  fi

  local _target_folder_path=
  local _target_notebook_path=
  local _target_relative_path=

  if [[ -n "${_target_selector:-}" ]]
  then
    _target_notebook_path="$(
      _notebooks show "${_target_selector:-}" --path 2>/dev/null  ||
        _notebooks current --path
    )"

    local _target_folder_relative_path=
    _target_folder_relative_path="$(
      _selector_resolve_folders "${_target_selector:-}" --build   || :
    )"

    _target_folder_path="${_target_notebook_path:-}/${_target_folder_relative_path:-}"

    _target_relative_path="$(
      _selector_get_identifier "${_target_selector:-}"
    )"

    if [[ -z "${_target_relative_path:-}" ]]
    then
      _target_relative_path="${_source_basename:-}"
    fi

    _target_relative_path="${_target_relative_path%/}"

    if [[ "${_target_selector:-}" =~ /$   ]]
    then
      _target_relative_path="${_target_relative_path:-}/${_source_basename:-}"
    fi

    if [[ -e "${_target_notebook_path:-}/${_target_relative_path:-}"  ]]
    then
      _warn printf "Already exists: %s\\n" "$(
        _color_primary "${_target_selector:-}"
      )"

      return 1
    fi
  else
    _target_notebook_path="$(
      _notebooks show "${_source_selector}" --path 2>/dev/null    ||
        _notebooks current --path
    )"

    # Get a unique filename based on the source filename:
    _target_relative_path="$(
      _notebooks current --filename "${_source_relative_path}"
    )"

    if [[ "${_target_relative_path:-}" =~ / ]]
    then
      _target_folder_path="${_source_notebook_path}/${_target_relative_path%/*}"
    else
      _target_folder_path="${_source_notebook_path}"
    fi
  fi

  # Check if the file is a text file:
  if _show "${_source_notebook_path}/${_source_relative_path}" --type text
  then # Text can use `_add`.
    # Print the source contents and pipe to `_add`:
    _show "${_source_notebook_path}/${_source_relative_path}"     \
      --no-color --print                                          \
      | _add "${_target_notebook_path}/${_target_relative_path}"
  else
    local _copy_arguments=(
      "${_source_notebook_path}/${_source_relative_path}"
      "${_target_notebook_path}/${_target_relative_path}"
    )

    if [[ -d "${_source_notebook_path}/${_source_relative_path}"  ]]
    then
      _copy_arguments=("-R" "${_copy_arguments[@]:-}")
    fi

    if [[ ! -e "${_target_folder_path:-}"   ]]
    then
      mkdir -p "${_target_folder_path:-}"
    fi

    cp "${_copy_arguments[@]:-}"

    _index add "${_target_relative_path##*/}" "${_target_folder_path}"

    _git checkpoint "${_target_notebook_path:-}" "[nb] Add: ${_target_relative_path}"

    printf "Added: %s\\n" "$(
      _show "${_target_notebook_path}/${_target_relative_path}" --info-line
    )"
  fi
}

# Use `_subcommands alias` to define a full alias with linked help / usage.
# Aliases also have to be added with `_subcommands add <name>`.
_subcommands alias "copy" "duplicate"
