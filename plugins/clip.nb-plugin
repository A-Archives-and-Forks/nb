#!/usr/bin/env bash
###############################################################################
# clip
#
# A plugin for `nb` providing clipboard functionality.
#
# Author: hyb (https://github.com/ohyhyb)
###############################################################################

# Add the new subcommand names with `_subcommands add <name>`.
_subcommands add "clip"

# Define help and usage text with `_subcommands describe <subcommand> <usage>`.
_subcommands describe "clip" <<HEREDOC
Usage:
  nb clip (<id> | <filename> | <path> | <title>)

Description:
  Copy contents of a text or markdown item to the clipboard.

Alias: \`clip\`
HEREDOC

# Define the subcommand as a function, named with a leading underscore.
_clip() {
  # The selector argument can be an <id>, <filename>, <path>, or <title>, with
  # or without a preceeding notebook name. Examples:
  #   1
  #   example.md
  #   title
  #   /path/to/example.md
  #   notebook:1
  #   notebook:example.md
  #   notebook:title
  #   notebook:/path/to/example.md
  local _selector="${1:-}"

  # Check for the presence of a selector, exiting and printing help if not
  # found:
  if [[ -z "${_selector:-}" ]]
  then
    _help "clip"
    exit 1
  fi

  # Get the relative path using the selector:
  local _source_relative_path
  _source_relative_path="$(_show "${_selector}" --relative-path)"

  # Get the current notebook path:
  local _notebook_path
  _notebook_path="$(_notebooks current --path)"

  # Validate that the selector represents a valid file:
  if [[ -z "${_source_relative_path:-}"                      ]] ||
     [[ ! -e "${_notebook_path}/${_source_relative_path}"    ]]
  then
    printf "Not found: %s\\n" "${_selector}"
    exit 1
  elif [[ ! -f "${_notebook_path}/${_source_relative_path}"  ]]
  then
    printf "Not a file: %s\\n" "${_selector}"
    exit 1
  fi

  if _show "${_source_relative_path}" --type text ||
     _show "${_source_relative_path}" --type md
  then
    if _command_exists "xclip" && [[ ! "${OSTYPE}" =~ ^darwin ]]
    then
      cat "${_notebook_path}/${_source_relative_path}" | xclip -sel clip
    else
      cat "${_notebook_path}/${_source_relative_path}" | pbcopy
    fi && printf "Copied $(_color_primary "${_source_relative_path}") contents to clipboard.%s\\n"
  else
    _exit_1 printf "Not a text or markdown file.%s\\n"
  fi
}

# Use `_subcommands alias` to define a full alias with linked help / usage.
# Aliases also have to be added with `_subcommands add <name>`.
_subcommands alias "clip"
